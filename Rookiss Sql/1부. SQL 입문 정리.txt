1강 : SSMS 입문 
테이블들은 엑셀의 시트와 같은 느낌. 그냥 데이터들을 분류해놓은 것. 각 데이터마다 자료형을 정해줄 수 있음


2강 : SELECT FROM WHERE
sql 키워드들은 순서대로 줄마다 실행되지 않음. 왜 Why? Because, It is made in america.
예를 들어, Sql에서 대표적으로 SELECT something FROM file; 같은 문법이 있다.
영어는 "Bring me a book from the desk." 니까 얼추 순서가 맞는데, 한국은 "책상에서 책 좀 가져다 줘." 라서 한국인은 From부터 시작한다고 보는게 이해하기 편함.

I. FROM : 원하는 파일 로드
II. SELECT : 출력을 하고자 하는 정보를 선택 및 추출
III. WHERE : 원하는 조건에 맞는 테이블만 가져옴.
코드는 SELECT -> FROM -> WHERE 순으로 작성함. 하지만 로직은 FROM -> WHERE -> SELECT 순으로 실행됨. FROM을 하지 않으면 데이터 로드를 안 한 것으므로 아무것도 못 함.

드래그한 부분만 실행되는 미친 기능이 있음.

LIKE : 문자열 패턴 매칭 구문
% : 문자 개수 상관없음. ex) string LIKE 'New%'; -- New로 시작하는거 다 가져옴. C#의 string.StartWith("New")랑 비슷함.
_ : 문자 개수 1개. ex) string LIKE 'New Yor_'; ex)  New Yor 다음에 딱 한 글자만 있어야 가져옴.
대소문자는 구분 안 함. 따로 옵션 있을지도?


3강 : ORDER BY
ORDER BY something; 으로 특정 컬럼을 기준으로 정렬 가능. ORDER BY Year, Month, Day; 등으로 여러 개를 우선 순위를 둬서 정렬 가능.
ASC가 기본 옵션으로 오름차순. DESC는 내림차순. ASC의 경우 NULL인 데이터가 맨 위로 오는데 그냥 WHERE로 NULL은 빼고 하는게 정신건강에 좋음.

SELECT TOP n(정수)로 맨 위에 있는 몇 개만 추출 가능. 상위 랭킹 100등 출력하는 것과 같이, 주로 ORDER BY와 같이 쓰임.

나이 많은 순서대로 정렬한 코드
SELECT nameFirst, nameLast, birthYear, birthMonth, birthDay
FROM players 
WHERE birthYear IS NOT NULL 
ORDER BY birthYear DESC, birthMonth DESC, birthDay DESC;


4강 : 수치와 문자열
사칙연산은 다른 프로그래밍 언어랑 똑같음.
NULL과 연산을 한다면 결과값은 무조건 NULL임. 
문자열 앞에 N을 붙여 N'어떤 문자' 형식으로 사용하면 유니코드를 뜻하고 이를 통해 한국어 이용 가능.

SELECT에서 AS로 자신만의 컬럼을 정의할 수 있는데, FROM이나 WHERE에서는 순서상으로 이를 모르기 때문에(2강 참고) 사용하지 못함.
특정 컬럼끼리 연산을 한 후 AS를 이용해 결과를 확인할 수 있음. ex) SELECT nameFirst + ' '+ nameLast AS fullName

SUBSTRING 처럼 C#에서도 보이는 함수들이 있는데 시작 index가 0이 아니라 1임.

전체 이름 나타내는 예제 코드
SELECT nameFirst + ' ' + nameLast AS fullName
FROM players
WHERE nameFirst IS NOT NULL AND nameLast IS NOT NULL;


5강 : DATETIME
I. DATETIME 기본
날짜와 시간을 표현하는 형식인 DATETIME이라는 것이 존재함. 
CAST('YYYYMMDD HH:MM:SS.nnn' AS DATETIME) 형식으로 문자열을 입력해서 캐스팅이 가능함. (문자열 형식 중 시간 부분은 생략 가능)
WHERE time 비교, 특정 함수 사용, 데이터 입력 등. 어차피 DATETIME 이라는 것이 확정인 상황이라면 문자열만 넣어도 자동 캐스팅이 되므로 CAST부분을 생략해도 됨.

'WHERE time >= 날짜' 의 형식으로 특정 날짜를 날짜보다 전 혹은 후에 데이터들만 가져올 수 있음.

CURRENT_TIMESTAMP 를 이용하면 내 컴퓨터 기준 현재 시간을 가져올 수 있음.
GETUTCDATE()을 사용하면 세계 기준 시간으로 관리 가능. 
서버가 서로 멀리 있거나 성공해서 외국에도 서비스하면 서로 다른 시간을 비교하는게 힘들기 때문에 그럴 때 쓰면 좋음.

II. 여러 함수들
SELECT DATEADD(부분, 수량, 날짜) : 날짜에 특정 부분을 수량만큼 더함.
SELECT DATEADD(YEAR, 1, '20000101') : 2000년 1월 1일에 1년 더해서 2001년 1월 1일 됨.

SELECT DATEDIFF(부분, 날짜2, 날짜1) : 특정 부분에 대해 날짜1- 날짜2. 즉 차이를 구함
SELECT DATEDIFF(YEAR, '19000101', '20000101') : 2000년과 1900년을 비교하므로 결과는 2000 - 1900 = 100

SELECT DATEPART(부분, '날짜') : 원하는 부분만 가져옴
SELECT DATEPART(HOUR, '20000101 01:04:02') : 결과는 1. YEAR(날짜) 형식으로 축약 가능함. 근데 시분초는 안 됨.


6강 : CASE
CASE라고 조건문처럼 쓸 수 있는 친구가 있음. 2가지 형식이 있는데 C#의 switch, if-else랑 굉장히 닮아있음. 그래서 딱히 설명은 안 함.

I. switch 형식
CASE 변수,
	WHEN 값 THEN 반환값
	-- 계속되는 비교
	ELSE 반환값
END

ELSE는 생략 시 NULL이 반환됨.

II. if-else 형식
CASE
	WHEN 조건 THEN 반환값
	-- 계속되는 비교
	ELSE 반환값
END


7강 : 집계 함수
I. COUNT : 행의 개수 가져옴. NULL은 무시. 애초에 모든 집계 함수들은 NULL을 무시함.
II. DISTINCT(별개의, 뚜렷한) : 중복 제거. 여러 개의 요소 조합 가능. 예를 들어 'DISTINCT birthYear'는 태어난 년도만 똑같으면 중복 판정이지만 'DISTINCT birthYear, birthMonth, birthDay'는 생년월일 다 똑같아야 중복으로 인정됨.
III. SUM, AVG, MIN, MAX : 인자값으로 행 이름 넣어서 사용. 어떤 결과를 뱉을지는 관상만 봐도 알 수 있으니 패스.
MIN, MAX는 딱 같만 출력하기 때문에 전체 정보를 가져오고 싶으면 ORDER BY랑 TOP을 조합해서 써야 됨.

CASE문을 이용해서 NULL이면 0으로 처리하는 코드
AVG(CASE WHEN weight IS NULL THEN 0 ELSE whight END)


8강 : 연습 문제
특정 값(홈런, 랭킹 등등)이 가장 높은 사람의 정보를 출력하고 싶다면 MAX()를 쓰는게 아니라 ORDER BY랑 TOP을 연계해서 쓰면 됨.

보스턴 팀 소속 중 가장 홈런 많이 친 사람 정보 출력하는 코드
SELECT TOP(1) *
FROM batting
WHERE teamID = 'BOS'
ORDER BY HR DESC


9강 : GROUP BY
I. GROUP BY
GROUP BY : 특정 행에 중복된 정보들을 하나로 합쳐서 보는 것.
, 를 이용하여 2개 이상의 정보를 묶을 수 있음. ex) 년도와 팀 이름별로 묶기.
이때 정보를 합치는 개념이므로 SELECT에서는 GROUP BY로 묶은 정보만 접근 가능하며, 특정 개별 정보에는 접근할 수 없음. 하지만 집계 함수들은 사용 가능. ex) 선수들을 팀명을 기준으로 묶으면 특정 선수의 이름에는 접근 불가. 다만 특정 팀에 몇 명의 선수가 있는지는 COUNT로, 모든 선수들의 몸무게 합은 SUM으로 구할 수 있음.

II. HAVING
이제 GROUP BY를 써서 "2021년에 연봉이 제일 높은 팀 순서대로 나열. 이때 총 연봉이 10억 이하인 팀 제외" 같은 기능을 구현할 수 있는데 이때 문제가 하나 있다.
일단 지금까지 배운 문법으로 코드를 짜면 아마 이럴 것이다.

SELECT SUM(Salary) AS allSalary
FROM progamers
WHERE year = 2021 AND allSalary > 1000000000 -- 여기서 크래쉬 남
GROUP BY name
ORDER BY allSalary

기존의 방식대로 코드를 짜다 보면 문제가 하나 생긴다. WHERE은 로직 상으로는 SELECT와 GROUP BY 전에 실행되므로 allSalary라는 키워드에 접근하지 못한다. 따라서 10억 이하 제외라는 필터링을 걸 수가 없다.
이를 해결하기 위해 있는 문법이 HAVING 이다.

HAVING : GROUP BY 다음에 조건을 걸 수 있는 문법
사용 예시를 한 번 봐보자.

SELECT SUM(Salary) AS allSalary
FROM progamers
WHERE yearID = 2021
GROUP BY name
HAVING SUM(Salary) > 1000000000 -- 추가된 HAVING문
ORDER BY allSalary

이때 HAVING에서도 SELECT에는 접근하지 못하므로 allSalary가 아닌 SUM(Salary)을 이용해서 비교해야 한다.

III. 실행 순서
GROUP BY와 HAVING이 추가되면서 실행 순서가 애매할 수 있으니, 간단한 비유를 들어서 정리해보자.

FROM		-- 창고에서(특정 Table로 치환 가능)
WHERE 		-- 공을
GROUP BY	-- 색깔별로 분류해서
HAVING		-- 빨간색은 빼고
SELECT 		-- 갖고 와서 (데이터 추출)
ORDER BY 	-- 크기 별로 나열해주세요

보면 SELECT까지는 어떤 데이터를 어떻게 가져올지에 대한 명시고, 후에는 가져온 데이터를 어떻게 다룰지에 대한 내용이다. 
작업상 분기점이라는 중요한 역할을 하고 있지만 영어 문법상 맨 처음에오므로 해석할때는 중간에 있다고 생각해야 인생 살기 편하다.


10강 : INSERT DELETE UPDATE
I. 삽입
INSERT INTO 테이블 명 VALUES (값을 쉼표로 구분하며 테이블 순서대로  넣음).  TMI : 페이커의 연봉은 int형으로 표현할 수 없다.

II. 삭제
DELETE FROM 테이블 명 : 이건 테이블 전체를 지움
DELETE FROM 테이블 명 WHERE 조건 : 조건에 만족하는 놈을 지움. 특정 데이터 하나만 지우고 싶다면 식별 ID를 사용하면 됨.
조건을 이상하게 붙이거나 실수로 까먹으면 순식간에 수많은 데이터가 ㅃㅃ2 해버릴 수도 있으므로 조심해서 써야 할 듯.

III. 갱신
UPDATE 테이블 명 SET 행 이름 = 값 WHERE 조건
SET 에서는 ,를 이용해서 여러 개의 값을 한 번에 바꿀 수 있음.
역시 조건이 없으면 테이블 전체, 있으면 만족하는 모든 데이터를 수정하므로 조건을 잘 넣어줘야 함.


11강 : SUBQUERY
I. SUBQUERY
현재까지의 문법이 아쉬운 것은 하나의 테이블 내에서만 작업을 하고 있다는 것.
만약 역대 연봉 1위인 사람의 개인정보를 알고 싶다면 어떨까? 연봉과 개인정보 테이블은 각각 구분되어 있어서 한 번에는 하지 못함. 결국 연봉 1위를 찾고 그 정보를 기준으로 공용 식별 ID를 개인정보 테이블에서 찾아야 됨.
이럴 때 쓰는게 SUBQUERY(서브 쿼리)이고, 그냥 기존 명령문 중간에 SELECT를 한 번 더 쓰는 느낌임.

단일 예시 코드
SELECT *
FROM players
WHERE playerID = (SELECT TOP (1) playerID FROM salaries ORDER BY salary DESC)

playerID를 가장 연봉이 높은 선수의 것을 가져와서 SELECT 함. 이때 서브쿼리는 무조건 () 안에 작성해야 함.

만약 데이터가 여러개라면?
위에서는 단 한명이었지만 상위 20위의 데이터를 가져오고 싶을때는 어떨까? 그냥 TOP20만 쓰면 될까? 답은 NO임
페이커처럼 년도별로 연봉 기록을 갱신하는 선수가 상위권에 중복될 수 있다. 근데, playerID는 고유 값인데 이게 중복되는데 말이 되는가?
이런 문제 때문에 여러 개의 데이터를 return하면 애초에 =을 못 씀. 대신 IN을 쓰면 됨. return 된 얘들 중에 나한테 있는지 없는지만 따지는 느낌임. 나한테 있으면 가져오고, 아니면 말고.
다중 예시 코드
SELECT *
FROM players
WHERE playerID IN (SELECT TOP (20) playerID FROM salaries ORDER BY salary DESC) -- = 에서 IN으로 바뀜

SUBQUERY는 WHERE에서 가장 많이 쓰기는 하지만 하드 코딩한 값 대신이라면 어디든지 들어갈 수 있음. 또한, 꼭 SELECT안에 SELECT를 쓰는게 아니라 INSERT같은 문법에도 사용 가능함.

II. INSERT SELECT
서브쿼리랑은 다른 개념이기는 하지만 INSERT할 때 VALUES대신에 SELECT라는 키워드를 쓸 수 있음.
사용 방식은 VALUES랑 거의 똑같은데 좀 더 대량의 정보를 넣을 때 유용함.
대표적으로 기존에 있던 테이블에서 데이터를 긁어오고 싶을 때 사용 가능.
INSERT INTO
SELECT id, name FROM data; 
같은 형식으로 기존에 있던 id나 이름을 죄다 넣을 수 있음.

III. 상관 관계 서브쿼리
어렵고 복잡해보이지만 일단 알아야 되는 문법. 지금 당장은 알고 있기만 해도 됨.

예시 코드
SELECT *
FROM players
WHERE EXISTS (SELECT playerID FROM battingpost WHERE battingpost.playerID = players.playerID)

코드를 보면 IN이 WHERE로 바꿘 거임.
딱 봐도 IN이 훨씬 편하지만 WHERE문을 쓴다는 것은 단순히 존재 여부만 따지는 것이 아니라 크기 비교 등 여러 가지 작업을 할 수 있다는 뜻이므로, 더 유연하다고 할 수 있음.
EXISTS는 그냥 이 값이 있으면 SELECT하고 없으면 스킵하는 문법.


12강 : 데이터베이스 작성
GUI로도 새로운 DB를 작성할 수 있지만 코드로도 가능.

DB 생성 : CREATE DATABASE 이름;
TABLE 생성 : CREATE TABLE 이름( 컬럼명 타입 옵션, 컬럼명2 타입 옵션, 컬럼명3 타입........... )
TABLE 삭제 : DROP TALBE 이름
TABLE 변경
컬럼 추가 : ALTER TABLE 테이블 이름 ADD 컬럼명 Type; 
컬럼 삭제 : ALTER TABLE 테이블 이름 DROP 컬럼명;
컬럼 변경 : ALTER TABLE 테이블 이름 ALTER 컬럼명 타입 옵션;
제약사항 추가 : ALTER TABLE 테이블 제약별칭 ADD CONSTRAINT 이름 제약종류 (컬럼명)
제약사항 삭제 : ALTER TABLE 테이블 이름 DROP CONSTRAINT 제약별칭


13강 : 정규화
I. 개념 : 테이블을 올바르게 변경하고 분할하는 것.
내가 타입 객체 패턴 예제 만들면서 데이터 분할한 것과 굉장히 흡사.
C#에서는 중첩 클래스를 일반 자료형 변수처럼 한 줄에 들고 있지만, 데이터에서는 그 클래스가 들고 있는 변수들을 다 기입해야 함. 이때 모든 정보를 하나의 테이블에 때려박으면 읽기도, 수정하기도 힘듬.
그래서 하나의 클래스가 가지고 있는 정보를 여러 개의 테이블로 분리함.
예를 들어 플레이어가 인벤토리라는 클래스를 들고 있고 거기 안에는 Item 클래스를 배열로 들고 있다면 이 부분은 따로 테이블을 파서 관리함.
이때, 어떤 플레이어가 아이템을 소유하고 있는지는 알아야 하므로 플레이어의 고유 ID정보를 들고 있고 이를 이용해 주인님을 찾음.


14강 : 인덱스
I. 개념 : 특정 데이터를 빠르게 찾기 위한 것. 책 후반에 있는 키워드 색인과 유사함. 주로 이진 검색 트리를 사용.

II. CLUSTERED INDEX vs NON-CLUSTERED INDEX
CLUSTERED INDEX = PRINARY KEY : 제일 좋고 빠르다. 하지만 테이블 당 하나만 존재 가능.
Q : 아니 제일 빠르고 좋은데 왜 하나만 있나요?
A : 위에서 책 뒤에 나오는 키워드 색인 예시를 들었는데, 사실 얘는 사전에 가까움. 사전은 ㄱㄴㄷ순서로 이미 정렬이 되어 있지 않음? 그거임.
색인창에서 어디에 있는지에 대한 힌트를 찾고 데이터에 접근하는게 아니라 그냥 바로 접근하니까 더 빠름. 근데 ㄱㄴㄷ처럼 절대적인 정렬 기준은 하나밖에 존재할 수 없기에 딱 하나의 컬럼에만 적용 가능.

기본적으로 모든 데이터를 대상으로 비교를 해야 할 경우가 있는 컬럼에는 NON이든 아니든, 무조건 INDEX를 걸어주는 게 좋음. 
대표적으로 닉네임 중복 처리를 할 때마다 수천만개의 닉네임을 일일이 비교하면 게임이 운명할 것이기 때문.

II. INDEX 생성 및 삭제 (여기서 다루는 건 NON-CLUSTERED INDEX)
생성 : CREATE INDEX 키 이름 ON 테이블명(컬럼명)
삭제 : DROP INDEX 테이블이름.키 이름
UNIQUE : INDEX 걸 때 넣을 수 있는 옵션. 이름만 봐도 알 수 있듯이 데이터 중복을 막아 줌.


15강 : UNION
테이블끼리 교집합, 합집합, 차집합을 구할 때 쓰는 문법들을 알아보는 시간.

I. 사용법
SELECT playerID
FROM a
어쩌구 저쩌구

집합 키워드 -- SELECT로 추출한 2개의 데이터 사이에 구문을 넣음

SELECT playerID
FROM b
어쩌구 저쩌구

II. 키워드
UNION : 교집합 (기본적으로 중복 제거함. ALL 붙이면 허용)
INTERSECT : 합집합
EXCEPT : 차집합( 앞에거 중에 뒤에거랑 중복되는게 있으면 제거)


16강 : JOIN
I. 개념 : UNION이 두 데이터를 새로로 합친다면 JOIN은 가로로 합침. 정규화 할 때 나눈 데이터를 다시 합치는 느낌.

II. INNER JOIN
"INNER JOIN table ON 조건" 의 형식으로 사용. 조건이 일치하면 합침.

사용 예시
SELECT *
FROM players AS pl
	INNER JOIN salaries AS sa
	ON pl.playerID = sa.playerID
AS로 별칭을 붙이는 이유는 둘 가 playerID라는 똑같은 이름의 컬럼을 갖고 있으니 서로 구분해주기 위함.
위 코드를 실행하면 기존 player정보에 연봉 정보가 맨 뒤에 추가됨.

III. LEFT/RIGHT JOIN
LEFT : 문법은 INNER JOIN하고 똑같음. 벗 조건이 일치하지 않더라도, 왼쪽에 정보가 있으면 일단 무조건 표시함. 그리고 조건을 만족하지 않는다면 오른쪽을 NULL로 밀어버림.
RIGHT : LEFT랑 방향만 반대고 그냥 똑같음.


17강 : TRANSACTION
개념 : 아이템 교환이나, 강화 등 굉장히 중요한 작업들의 원자성을 지켜주는 기능.
COMMIT : 테이블에 작업을 적용하는 것. 기본적으로 INSERT 등 문법에 기본 옵션으로 달려 있음.
ROLLBACK : 이전에 하던 작업들을 취소.

사용 예시
BEGIN TRY
	BEGIN TRAN -- 내부 작업들 중 하나라도 Crash가 나면 CATCH로 들어가게 되고 ROLLBACK이 실행되어 이전에 완료되었던 작업들도 모두 취소됨.
		작업 1
		작업 2
		작업 3 
	COMMIT
END TRY

BEGIN CATCH
	IF @@TRANCOUNT > 0 -- 현재 활성화된 트랙잭션 수가 0보다 크다면
		ROLLBACK
END CATCH

트랙잭션은 내부적으로 lock을 거는 것과 굉장히 유사하기 때문에 트랜잭션 안에 작업이 실행되는 동안에는 다른 곳에서 접근을 못 함.
그렇기에 너무 오래 걸리는 작업을 넣으면 지연이 생길 수 있으므로 진짜로 원자적으로 실행되어야 하는 작업만 넣어야 함.


17강 : 변수와 흐름 제어
Shift + Tab 단축키로 탭을 당길 수 있다.

I. 변수
선언 : DECLARE 변수 이름 AS 타입. (declare : 선언하다)
대입 : SET 변수 이름 = 값

사용 예시 : 가장 연봉 높은 선수의 이름 저장
SELECT TOP 1 @firstName = p.firstName, @lastName = p.lastName
FROM players AS pl
	INNER JOIN salaries AS sa
	ON pl.playerID = sa.playerID
ORDER BY salary DESC

SELECT @firstName, @lastName -- 변수 출력

II. bacth : GO로 코드를 블록으로 나눌 수 있음. 서로 다른 영역에 있으면 변수명 겹쳐도 되는 등, C#의 {}랑 비슷한데, 다른 블록에서 크래쉬가 나도 멈추지 않는다는 차이점이 있음.

III. IF : C#등 여러 언어에서 나오는 그 IF임. 다만 {}대신 BEGIN과 END 사용. 한 줄만 실행할거면 생략 가능.

IV. WHILE : 이것 역시 내가 알고 있는 그거임. BREAK랑 CONTINUE도 있음. 이것도 {}는 BEGIN, END로 대체.

V. 테이블 변수 : 임시로 사용할 테이블을 변수에 담을 수 있음. 이번 강의에서는 이게 제일 중요함.

DECLARE 테이블 이름 TABLE(테이블 양식) -- 임시 테이블 선언

-- INSERT 등 여러 작업

SELECT * -- 임시 테이블 출력
FROM 테이블 명

-- 임시 테이블은 temp table이라는 곳에 있다가 다 실행되면 삭제됨.


18강 : 윈도우 함수
I. 개념 : 기존의 GROUP BY는 데이터를 하나로 뭉쳐서 해석해서 개별 정보들이 날라갔는데 그걸 안날리고 볼 수 있음
II. 사용법 : 함수명() OVER ([PARTITION BY] [ORDER BY] [ROWS]) -- ORDER BY만 넣는 등, 생략 가능
PARTITION BY : GROUP BY와 비슷. 하지만 정보를 하나로 합치지 않고, 정보를 날리지도 않음
ORDER BY : 그냥 원래 쓰던 방식이랑 똑같음. 어떻게 정렬할 것인가.
ROW : 범위
사용하면 함수에 따른 새로운 정보를 담고 있는 컬럼이 생김. RANK()는 랭킹 정보를 가진 컬럼을 추가로 뒤에 붙임.

선수가 가장 연봉을 많이 받았던 년도 순으로 정렬하는 코드
SELECT *,
	RANK() OVER (PARTITION BY playerID ORDER BY salary DESC)
FROM salaries 
ORDER BY playerID

2022 페이커 50억  1
2021 페이커 30억  2
2020 페이커 20억  3
2019 페이커 20억  3
2018 페이커 10억  5
......

2022 쵸비 20억  1
2021 쵸비 10억  2

이런 식으로 선수마다 개별 랭킹이 매겨짐.










